---
- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    #your region
    region: us-east-1
    keyname: cf-cass-f
    #your ip address
    allowed_ip: 0.0.0.0/0
    instance_type: t2.micro
    image: ami-fce3c696
  tasks:
    - name: create key pair
      tags: keypair
      local_action:
        module: ec2_key
        region: "{{ region }}"
        name: "{{ keyname }}"
      register: mykey
    - name: write the private key to a file
      tags: keypair
      local_action: shell echo -e "{{ item.value.private_key }}" > ~/.ssh/"{{ keyname }}".pem && chmod 600 ~/.ssh/"{{ keyname }}".pem && sed -i 's/^-e //g' ~/.ssh/"{{ keyname }}".pem
      with_dict: mykey
      when: item.value.private_key is defined

    - name: create security group
      tags: sg
      local_action:
        module: ec2_group
        region: "{{ region }}"
        #your security group name
        name: cfs_cassandra_1
        description: security group for apsydney webserver host
        rules:
          # allow ssh access from your ip address
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ allowed_ip }}"
          # allow http access from anywhere
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          # allow https access from anywhere
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: launch ec2 instance
      tags: ec2
      local_action:
        module: ec2
        region: "{{ region }}"
        key_name: "{{ keyname }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: yes
        group: cfs_cassandra_1
        #id: cassandra_launch_2
        instance_tags:
          Name: cassandra-6
          class: cassandra
      register: ec2

    - name: Allocating elastic IP to instance
      tags: eip
      ec2_eip:
        region: "{{ region }}"
        instance_id: "{{ ec2.instances[0].id }}"
      register: instance_eip
    - debug: var=instance_eip.public_ip


    - name: Wait for instances to listen on port 22
      wait_for:
        state: started
        host: "{{ instance_eip.public_ip }}"
        port: 22
      when: ec2|changed

    - add_host: hostname={{ instance_eip.public_ip }} groupname="ec2hosts"

- name: Cassandra base requirements installation
  hosts:
    - ec2hosts
  user: install_user
  sudo: yes
  environment: proxy_env
  roles:
  - { role: cassandra_common, tags: ['cassandra_common'] }

- name: Cassandra installation
  serial: 1
  hosts:
    - ec2hosts
  user: install_user
  sudo: yes
  environment: proxy_env
  roles:
  - { role: cassandra, tags: ['cassandra'] }
